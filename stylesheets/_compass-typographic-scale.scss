
// -----------------------------------------------------------------------------
// compass-typographic-scale
//
// Easy setting of font sizes with pleasing typographical heirarchy without
// needing to do any calculations.
//
// Author: @JerryStillman
//
// License: MIT
// -----------------------------------------------------------------------------


$base-font-size: 16px !default;
$base-line-height: 24px !default;

$ts-header-scale: 36 24 21 18 16 14 !default;
$ts-rhythm: 0 1 1 0 !default;
$ts-base-font-size-points-equiv: 11 !default;

$ts-double-stranded: true !default;
$ts-double-stranded-classnames: h1 h2 h3 h4 h5 h6 !default;
// Or e.g.
//$ts-double-stranded-classnames: alpha beta gamma delta epsilon zeta;
$ts-use-html-classes: true !default;

// Set to false to disable any output
$ts-outsize-scale: 72 60 48 9 !default;
$ts-outsize-scale-classnames: giga mega kilo micro !default;
$ts-outsize-use-html-classes: true !default;

// Set to false to disable setting vertical margins and padding to zero
// globally, instead they will be set only when calling a *-with-rhythm mixin
$ts-reset-vertical-whitespace: true !default;


@import 'compass/typography/vertical_rhythm';



@if not unitless($ts-base-font-size-points-equiv) {
  @warn '$ts-base-font-size-points-equiv should not have units'
}

@if length($ts-double-stranded-classnames) != 6 {
  @warn '$ts-double-stranded-classnames must have six items!';
}

@if $ts-outsize-scale {
  @if not length($ts-outsize-scale) == length($ts-outsize-scale-classnames) {
    @warn 'Length of $ts-outsize-scale and $ts-outsize-scale-classnames must be the same!';
  }
}



// Setup functions

@mixin ts-reset-vertical-spacing {
  margin-top: 0;
  padding-top: 0;
  padding-bottom: 0;
  margin-bottom: 0;
}


@mixin ts-reset-whitespace {
  %ts-reset-vertical-spacing {
    @include ts-reset-vertical-spacing; 
  }

  @if $ts-reset-vertical-whitespace {

    #{ts-headings()} {
      @extend %ts-reset-vertical-spacing;
    }

    @if $ts-double-stranded {
      @each $name in $ts-double-stranded-classnames {
        %ts-#{$name} {
          @extend %ts-reset-vertical-spacing;
        }
      }
    }

    @each $name in $ts-outsize-scale-classnames {
      %ts-#{$name} {
        @extend %ts-reset-vertical-spacing;
      }
    }

    @if $ts-outsize-scale and $ts-outsize-use-html-classes {
      @each $name in $ts-outsize-scale-classnames {
        .#{$name} {
          @extend %ts-reset-vertical-spacing;
        }
      }
    }

  }
}

@mixin ts-establish-baseline {
  @include establish-baseline($font-size: $base-font-size);
  @include ts-reset-whitespace;
}



// Helper functions to do the scaling

@function ts-point2pixel(
  $pt,
  $equiv: $ts-base-font-size-points-equiv,
  $base: $base-font-size
) {
    @return $pt * ( $base / $equiv ) + 0px;
}


@function ts-get-size($level, $scale) {
  @return ts-point2pixel(nth($scale, $level));
}


// Function to output double-stranded headings
@function ts-headings($levels: 1 2 3 4 5 6, $double-stranded: $ts-double-stranded) {
  $list: $ts-double-stranded-classnames;

  $out: unquote('');

  @each $i in $levels {
    $out: #{$out} h#{$i}#{unquote(',')};
    @if $double-stranded and $ts-use-html-classes {
      $out: #{$out} unquote('.')#{nth($list, $i)}#{unquote(',')};
    }
  }

  @return $out;
}

// ..alias for above
@function ts-headers($levels: 1 2 3 4 5 6, $double-stranded: $ts-double-stranded) {
  @return ts-headings($levels, $double-stranded);
}



// Interface to Vertical Rhythm module

// Set rhythm; 0 values are ignored unless
// $ts-reset-vertical-whitespace is false
@mixin ts-rhythm($size, $rhythm) {

  $m-top: nth($rhythm, 1);
  $p-top: nth($rhythm, 2);
  $p-bot: nth($rhythm, 3);
  $m-bot: nth($rhythm, 4);

  @if not $ts-reset-vertical-whitespace {

    @include margin-leader($m-top, $size);
    @include padding-leader($p-top, $size);
    @include padding-trailer($p-bot, $size);
    @include margin-trailer($m-bot, $size);

  } @else {

    @if $m-top > 0 {
      @include margin-leader($m-top, $size);
    }

    @if $p-top > 0 {
      @include padding-leader($p-top, $size);
    }
    
    @if $p-bot > 0 {
      @include padding-trailer($p-bot, $size);
    }

    @if $m-bot > 0 {
      @include margin-trailer($m-bot, $size);
    }

  }

}


@mixin ts-size-type($size: $base-font-size, $rhythm: false) {
  $lines: lines-for-font-size($size);
  @include adjust-font-size-to($size, $lines);
  @if $rhythm {
    @include ts-rhythm($size, $rhythm);
  }
}



// Public Mixins


// Set an individual element to a size ($level) on the header scale
@mixin ts-scale($level) {
  $target: ts-get-size($level, $ts-header-scale);
  @include ts-size-type($target);
}

// ..also set whitespace according to $rhythm
@mixin ts-scale-with-rhythm($level, $rhythm: $ts-rhythm) {
  $target: ts-get-size($level, $ts-header-scale);
  @include ts-size-type($target, $rhythm);
}

// ..alias for above
@mixin ts-scale-with-spacing($level, $rhythm: $ts-rhythm) {
  @include ts-scale-with-rhythm($level, $rhythm);
}



// These mixins set h1 -> h6 all at once

// Set all header sizes, with double stranded classes
@mixin ts-header-scale($rhythm: false) {

  @for $i from 1 through 6 {
    $name: nth($ts-double-stranded-classnames, $i);

    %ts-#{$name} {
      @include ts-scale-with-rhythm($i, $rhythm);
    }

    h#{$i} {
      @extend %ts-#{$name};
    }

    @if $ts-double-stranded and $ts-use-html-classes {
      .#{$name} {
        @extend %ts-#{$name};
      }
    }
  }
}

// ..also set rhythm
@mixin ts-header-scale-with-rhythm($rhythm: $ts-rhythm) {
  @include ts-header-scale($rhythm);
}

// ..alias for above
@mixin ts-header-scale-with-spacing($rhythm: $ts-rhythm) {
  @include ts-header-scale($rhythm);
}



// Mixin for arbitrary number of additional classes

@mixin ts-outsize-scale($rhythm: false) {

  @if not $ts-outsize-scale {
    @warn 'Calling outsize scale mixins with $ts-outsize-scale set to false!';

  } @else  {

    $list: $ts-outsize-scale-classnames;

    @each $name in $list {
      $i: index($list, $name);
      $target: ts-get-size($i, $ts-outsize-scale);

      %ts-#{$name} {
          @include ts-size-type($target, $rhythm);
      }

      @if $ts-outsize-use-html-classes {
        .#{$name} {
          @extend %ts-#{$name};
        }
      }

    }
  }
}

// ..also set rhythm
@mixin ts-outsize-scale-with-rhythm($rhythm: $ts-rhythm) {
  @include ts-outsize-scale($rhythm);
}

// ..alias for above
@mixin ts-outsize-scale-with-spacing($rhythm: $ts-rhythm) {
  @include ts-outsize-scale($rhythm);
}


