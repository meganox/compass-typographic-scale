// -----------------------------------------------------------------------------
// compass-typographic-scale
//
// Easy setting of font sizes with pleasing typographical heirarchy without
// needing to do any calculations.
//
// Author: @JerryStillman
//
// License: MIT
// -----------------------------------------------------------------------------

$ts-header-scale: 36 24 21 18 16 14 !default;
$ts-rhythm: 0 1 1 0 !default;
$ts-base-font-size-points-equiv: 11 !default;

$ts-double-stranded: true !default;
$ts-double-stranded-classnames: h1 h2 h3 h4 h5 h6 !default;
// Or e.g.
//$ts-double-stranded-classnames: alpha beta gamma delta epsilon zeta;
$ts-use-silent-classes: false !default;

$ts-outsize-scale: 72 60 48 9 !default;
$ts-outsize-scale-classnames: giga mega kilo micro !default;
$ts-outsize-use-silent-classes: $ts-use-silent-classes !default;



// ยง Private - no API guarantees

@import 'compass/typography/vertical_rhythm';
@import 'compass-typographic-scale/utilities';

@if not unitless($ts-base-font-size-points-equiv) {
  @warn '$ts-base-font-size-points-equiv should not have units'
}



// ยง Public Mixins and Functions
// -----------------------------------------------------------------------------


// Set an individual element to a size ($level) on the header scale
@mixin ts-scale($level) {
  $target: ts-point2pixel(nth($ts-header-scale, $level));
  @include ts-size-type($target);
}

// ..also set whitespace according to $rhythm
@mixin ts-scale-with-rhythm($level, $rhythm: $ts-rhythm) {
  $target: ts-point2pixel(nth($ts-header-scale, $level));
  @include ts-size-type($target, $rhythm);
}

// ..alias for above
@mixin ts-scale-with-spacing($level, $rhythm: $ts-rhythm) {
  @include ts-scale-with-rhythm($level, $rhythm);
}


// These mixins set h1 -> h6 all at once

// Set all header sizes, with double stranded classes
@mixin ts-header-scale($rhythm: false) {
  $ts-classtype: unquote(".");
  @if $ts-use-silent-classes {
    $ts-classtype: unquote("%");
  }

  @if $ts-double-stranded {

    @for $i from 1 through 6 {
      $name: nth($ts-double-stranded-classnames, $i);
      h#{$i}, #{$ts-classtype}#{$name} {
        @include ts-scale-with-rhythm($i, $rhythm);
      }
    }

  } @else {
  
    @for $i from 1 through 6 {
      h#{$i} {
        @include ts-scale-with-rhythm($i, $rhythm);
      }
    }

  }
}

// ..also set rhythm
@mixin ts-header-scale-with-rhythm($rhythm: $ts-rhythm) {
  @include ts-header-scale($rhythm);
}

// ..alias for above
@mixin ts-header-scale-with-spacing($rhythm: $ts-rhythm) {
  @include ts-header-scale($rhythm);
}


// Convenience mixin for arbitrary number of additional classes

@mixin ts-outsize-scale($rhythm: false) {
  $list: $ts-outsize-scale-classnames;

  $ts-classtype: unquote(".");
  @if $ts-outsize-use-silent-classes {
    $ts-classtype: unquote("%");
  }

  @each $name in $list {
    $i: index($list, $name);
    $target: ts-point2pixel(nth($ts-outsize-scale, $i));
    #{$ts-classtype}#{$name} {
        @include ts-size-type($target, $rhythm);
    }
  }
}

// ..also set rhythm
@mixin ts-outsize-scale-with-rhythm($rhythm: $ts-rhythm) {
  @include ts-outsize-scale($rhythm);
}

// ..alias for above
@mixin ts-outsize-scale-with-spacing($rhythm: $ts-rhythm) {
  @include ts-outsize-scale($rhythm);
}
